import React, { createContext, useContext, useReducer, useEffect } from 'react';
import { CartState, CartItem, Product } from '../types';

type CartAction =
  | { type: 'ADD_ITEM'; payload: { product: Product; quantity: number } }
  | { type: 'REMOVE_ITEM'; payload: string }
  | { type: 'UPDATE_QUANTITY'; payload: { id: string; quantity: number } }
  | { type: 'CLEAR_CART' }
  | { type: 'LOAD_CART'; payload: CartState };

interface CartContextType {
  state: CartState;
  addItem: (product: Product, quantity: number) => { success: boolean; message?: string };
  removeItem: (id: string) => void;
  updateQuantity: (id: string, quantity: number) => { success: boolean; message?: string };
  clearCart: () => void;
}

export const CartContext = createContext<CartContextType | undefined>(undefined);

const cartReducer = (state: CartState, action: CartAction): CartState => {
  switch (action.type) {
    case 'ADD_ITEM': {
      const { product, quantity } = action.payload;
      const existingItem = state.items.find(item => item.product.id === product.id);
      
      if (existingItem) {
        // Update quantity of existing item
        const updatedItems = state.items.map(item =>
          item.product.id === product.id
            ? { ...item, quantity: item.quantity + quantity }
            : item
        );
        
        const newTotal = updatedItems.reduce((total, item) => 
          total + (item.product.price * item.quantity), 0
        );
        
        return {
          items: updatedItems,
          total: newTotal,
          itemCount: updatedItems.reduce((count, item) => count + item.quantity, 0)
        };
      } else {
        // Add new item
        const newItems = [...state.items, { product, quantity }];
        const newTotal = newItems.reduce((total, item) => 
          total + (item.product.price * item.quantity), 0
        );
        
        return {
          items: newItems,
          total: newTotal,
          itemCount: newItems.reduce((count, item) => count + item.quantity, 0)
        };
      }
    }
    
    case 'REMOVE_ITEM': {
      const filteredItems = state.items.filter(item => item.product.id !== action.payload);
      const newTotal = filteredItems.reduce((total, item) => 
        total + (item.product.price * item.quantity), 0
      );
      
      return {
        items: filteredItems,
        total: newTotal,
        itemCount: filteredItems.reduce((count, item) => count + item.quantity, 0)
      };
    }
    
    case 'UPDATE_QUANTITY': {
      const { id, quantity } = action.payload;
      
      if (quantity <= 0) {
        // Remove item if quantity is 0 or less
        const filteredItems = state.items.filter(item => item.product.id !== id);
        const newTotal = filteredItems.reduce((total, item) => 
          total + (item.product.price * item.quantity), 0
        );
        
        return {
          items: filteredItems,
          total: newTotal,
          itemCount: filteredItems.reduce((count, item) => count + item.quantity, 0)
        };
      }
      
      const updatedItems = state.items.map(item =>
        item.product.id === id ? { ...item, quantity } : item
      );
      
      const newTotal = updatedItems.reduce((total, item) => 
        total + (item.product.price * item.quantity), 0
      );
      
      return {
        items: updatedItems,
        total: newTotal,
        itemCount: updatedItems.reduce((count, item) => count + item.quantity, 0)
      };
    }
    
    case 'CLEAR_CART':
      return { items: [], total: 0, itemCount: 0 };
    
    case 'LOAD_CART':
      return action.payload;
    
    default:
      return state;
  }
};

const initialState: CartState = {
  items: [],
  total: 0,
  itemCount: 0
};

export const CartProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [state, dispatch] = useReducer(cartReducer, initialState);

  // Load cart from localStorage on mount
  useEffect(() => {
    const savedCart = localStorage.getItem('miniworld-cart');
    if (savedCart) {
      try {
        const parsedCart = JSON.parse(savedCart);
        dispatch({ type: 'LOAD_CART', payload: parsedCart });
      } catch (error) {
        console.error('Error loading cart from localStorage:', error);
      }
    }
  }, []);

  // Save cart to localStorage whenever it changes
  useEffect(() => {
    localStorage.setItem('miniworld-cart', JSON.stringify(state));
  }, [state]);

  const addItem = (product: Product, quantity: number = 1) => {
    // Check if product is in stock
    if (!product.inStock || product.stockQuantity <= 0) {
      return { success: false, message: 'Product is out of stock' };
    }

    // Check if we have enough stock
    const existingItem = state.items.find(item => item.product.id === product.id);
    const currentQuantity = existingItem ? existingItem.quantity : 0;
    const totalQuantity = currentQuantity + quantity;

    if (totalQuantity > product.stockQuantity) {
      return { 
        success: false, 
        message: `Only ${product.stockQuantity - currentQuantity} items available in stock` 
      };
    }

    dispatch({ type: 'ADD_ITEM', payload: { product, quantity } });
    return { success: true };
  };

  const removeItem = (id: string) => {
    dispatch({ type: 'REMOVE_ITEM', payload: id });
  };

  const updateQuantity = (id: string, quantity: number) => {
    // Find the product to check stock
    const cartItem = state.items.find(item => item.product.id === id);
    if (!cartItem) {
      return { success: false, message: 'Item not found in cart' };
    }

    // Check if we have enough stock for the new quantity
    if (quantity > cartItem.product.stockQuantity) {
      return { 
        success: false, 
        message: `Only ${cartItem.product.stockQuantity} items available in stock` 
      };
    }

    dispatch({ type: 'UPDATE_QUANTITY', payload: { id, quantity } });
    return { success: true };
  };

  const clearCart = () => {
    dispatch({ type: 'CLEAR_CART' });
  };

  const value = {
    state,
    addItem,
    removeItem,
    updateQuantity,
    clearCart
  };

  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;
};

export const useCart = () => {
  const context = useContext(CartContext);
  if (context === undefined) {
    throw new Error('useCart must be used within a CartProvider');
  }
  return context;
};

// Export the cart state for direct access
export const cart = {
  items: [],
  total: 0,
  itemCount: 0
}; 
